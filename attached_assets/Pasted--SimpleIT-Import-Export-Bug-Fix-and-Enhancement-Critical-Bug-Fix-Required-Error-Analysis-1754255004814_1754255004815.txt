# SimpleIT Import/Export Bug Fix and Enhancement

## Critical Bug Fix Required

**Error Analysis:**
The system is throwing: `TypeError: Failed to execute 'fetch' on 'Window': '[object Object]' is not a valid HTTP method.`

This indicates that somewhere in the import functionality, an object is being passed as the HTTP method parameter instead of a string like 'POST', 'GET', etc.

## Tasks to Complete

### 1. Fix the Fetch API Error
- **Locate the problematic fetch call** in the import functionality (likely around line 96449 in the compiled code, but find the source)
- **Check all fetch calls** in the import/export modules
- **Ensure HTTP methods are strings**, not objects. Look for patterns like:
  ```javascript
  // WRONG - method is an object
  fetch(url, { method: requestConfig, ... })
  
  // CORRECT - method is a string
  fetch(url, { method: 'POST', ... })
  ```
- **Review the API request construction** in the asset import function

### 2. Implement File Format Support
- **Add comprehensive file format validation** for:
  - CSV files (.csv)
  - Excel files (.xlsx, .xls)
  - JSON files (.json)
  - TSV files (.tsv)
- **Create proper error messages** for unsupported formats instead of generic failures
- **Add file extension and MIME type checking**

### 3. Implement Field Mapping Confirmation System

Create a **two-step import process**:

#### Step 1: File Analysis and Preview
- Parse the uploaded file and extract column headers
- Display first 3-5 rows as preview
- Show detected file format and encoding
- Allow user to proceed to mapping step

#### Step 2: Field Mapping Interface
Create an intuitive mapping interface with:

**Visual Mapping Component:**
- Left column: Source file headers (from uploaded file)
- Right column: Target database fields (SimpleIT asset fields)
- Drag-and-drop or dropdown selection for mapping
- Clear visual indicators for:
  - ‚úÖ Mapped fields
  - ‚ö†Ô∏è Unmapped required fields
  - ‚ùì Optional fields
  - üîÑ Data type mismatches

**Field Mapping Features:**
- **Required field validation**: Highlight mandatory fields that must be mapped
- **Data type preview**: Show sample data for each column
- **Smart suggestions**: Auto-suggest mappings based on column names
- **Custom field mapping**: Allow mapping to custom asset fields
- **Transformation options**: Basic data cleaning (trim whitespace, format dates, etc.)

**Validation and Confirmation:**
- Show mapping summary before import
- Display potential data issues or warnings
- Provide "Test Import" with first 5 records
- Allow user to download mapping template for future use
- Save mapping configurations for reuse

### 4. Enhanced Error Handling
- **Comprehensive error logging** with specific error codes
- **User-friendly error messages** instead of technical stack traces
- **Rollback capability** if import fails partway through
- **Progress tracking** for large imports
- **Detailed import results** showing success/failure counts

### 5. Export Functionality Enhancement
- **Multiple export formats**: CSV, Excel, JSON
- **Custom field selection**: Let users choose which fields to export
- **Filter options**: Export based on asset criteria
- **Batch export**: Handle large datasets efficiently

## Implementation Requirements

### Frontend Components Needed:
1. **FileUploadComponent**: Drag-drop file upload with format validation
2. **FilePreviewComponent**: Display file contents and detected format
3. **FieldMappingComponent**: Interactive mapping interface
4. **ImportProgressComponent**: Real-time import progress and results
5. **MappingTemplateComponent**: Save/load mapping configurations

### Backend API Endpoints:
1. `POST /api/import/preview` - Analyze uploaded file
2. `POST /api/import/validate-mapping` - Validate field mappings
3. `POST /api/import/execute` - Execute the import with confirmed mappings
4. `GET /api/import/templates` - Get saved mapping templates
5. `POST /api/import/templates` - Save mapping template

### Key Code Areas to Review:
- Asset import service/controller
- File parsing utilities
- API request handling in frontend
- Error handling middleware
- Database transaction management

## Success Criteria
- ‚úÖ No more fetch API errors
- ‚úÖ Proper file format support and validation
- ‚úÖ Interactive field mapping with preview
- ‚úÖ User can confirm mappings before import
- ‚úÖ Clear error messages and progress feedback
- ‚úÖ Ability to save and reuse mapping templates
- ‚úÖ Robust error handling and rollback capability

## Testing Requirements
1. Test with various file formats (CSV, Excel, JSON)
2. Test with malformed files
3. Test with large datasets (1000+ records)
4. Test mapping validation with missing required fields
5. Test import rollback on errors
6. Test saved mapping template functionality

Please prioritize fixing the immediate fetch API error first, then implement the field mapping system to prevent future import issues and improve user experience.