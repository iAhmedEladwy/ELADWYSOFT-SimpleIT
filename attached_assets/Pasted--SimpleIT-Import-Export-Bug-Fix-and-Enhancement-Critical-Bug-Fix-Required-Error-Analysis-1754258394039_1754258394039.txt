# SimpleIT Import/Export Bug Fix and Enhancement

## Critical Bug Fix Required

**Error Analysis:**
The system is throwing: `TypeError: Failed to execute 'fetch' on 'Window': '[object Object]' is not a valid HTTP method.`

This indicates that somewhere in the import functionality, an object is being passed as the HTTP method parameter instead of a string like 'POST', 'GET', etc.

## Tasks to Complete

### 1. Fix the Fetch API Error
- **Locate the problematic fetch call** in the import functionality (likely around line 96449 in the compiled code, but find the source)
- **Check all fetch calls** in the import/export modules
- **Ensure HTTP methods are strings**, not objects. Look for patterns like:
  ```javascript
  // WRONG - method is an object
  fetch(url, { method: requestConfig, ... })
  
  // CORRECT - method is a string
  fetch(url, { method: 'POST', ... })
  ```
- **Review the API request construction** in the asset import function

### 2. Implement File Format Support
- **Add comprehensive file format validation** for:
  - CSV files (.csv)
  - Excel files (.xlsx, .xls)
  - JSON files (.json)
  - TSV files (.tsv)
- **Create proper error messages** for unsupported formats instead of generic failures
- **Add file extension and MIME type checking**

### 3. Implement Field Mapping Confirmation System

Create a **two-step import process**:

#### Step 1: File Analysis and Preview
- Parse the uploaded file and extract column headers
- Display first 3-5 rows as preview
- Show detected file format and encoding
- Allow user to proceed to mapping step

#### Step 2: Field Mapping Interface
Create an intuitive mapping interface with:

**Visual Mapping Component:**
- Left column: Source file headers (from uploaded file)
- Right column: Target database fields (SimpleIT asset fields)
- Drag-and-drop or dropdown selection for mapping
- Clear visual indicators for:
  - ✅ Mapped fields
  - ⚠️ Unmapped required fields
  - ❓ Optional fields
  - 🔄 Data type mismatches

**Field Mapping Features:**
- **Required field validation**: Highlight mandatory fields that must be mapped
- **Auto-generated field handling**: Clearly indicate fields like `asset_id` that shouldn't be mapped from source data
- **Data type preview**: Show sample data for each column with validation status
- **Smart suggestions**: Auto-suggest mappings based on column names
- **Custom field mapping**: Allow mapping to custom asset fields
- **Data transformation options**: 
  - Date format conversion (show detected format vs required format)
  - Enum value mapping (show invalid values and suggested corrections)
  - Text cleaning (trim whitespace, case conversion)
  - Default value assignment for empty/invalid fields
- **Real-time validation**: Show validation errors as user maps fields
- **Primary key handling**: Clearly show which fields are auto-generated vs required from source

**Validation and Confirmation:**
- Show mapping summary with data validation results before import
- Display potential data issues, invalid enum values, and date format problems
- Provide "Test Import" with first 5 records showing validation results
- Allow user to download mapping template for future use
- Save mapping configurations for reuse
- Show statistics: "X valid records, Y records with warnings, Z records will be skipped"

### 4. Critical Database Constraint Issues to Fix

**URGENT: Primary Key Generation Problem**
- **Current Issue**: `null value in column "asset_id" of relation "assets" violates not-null constraint`
- **Result**: 0 records imported successfully, all rows failing

**Root Cause Analysis:**
The import process is not generating or assigning `asset_id` values before database insertion.

**Required Fixes:**

#### A. Asset ID Generation
```javascript
// Ensure asset_id is generated for each record before database insertion
const generateAssetId = () => {
  // Option 1: Use database auto-increment (preferred)
  // Remove asset_id from INSERT statement, let database generate it
  
  // Option 2: Generate UUID if using UUID primary keys
  return crypto.randomUUID();
  
  // Option 3: Generate sequential ID based on existing records
  const lastAsset = await getLastAssetId();
  return `AST-${String(lastAsset + 1).padStart(6, '0')}`;
};
```

#### B. Import Process Fix
```javascript
// WRONG - Current approach (causing the error)
const importRecord = async (rowData) => {
  await db.query(
    'INSERT INTO assets (asset_id, name, type, ...) VALUES ($1, $2, $3, ...)',
    [null, rowData.name, rowData.type, ...] // asset_id is null!
  );
};

// CORRECT - Fixed approach
const importRecord = async (rowData) => {
  // Option 1: Let database auto-generate asset_id
  await db.query(
    'INSERT INTO assets (name, type, employee_id, ...) VALUES ($1, $2, $3, ...) RETURNING asset_id',
    [rowData.name, rowData.type, rowData.employee_id, ...]
  );
  
  // Option 2: Generate asset_id in application
  const assetId = generateAssetId();
  await db.query(
    'INSERT INTO assets (asset_id, name, type, ...) VALUES ($1, $2, $3, ...)',
    [assetId, rowData.name, rowData.type, ...]
  );
};
```

#### C. Database Schema Validation
Check if `asset_id` column should be:
- **AUTO_INCREMENT/SERIAL**: Let database generate automatically
- **UUID**: Generate UUID in application code
- **Custom Format**: Generate custom ID pattern (AST-000001, etc.)

#### D. Employment Type Enum Validation
- **Problem**: `"invalid input value for enum employment_type: \"NA\""`
- **Solution**: 
  - Add enum value validation before database insertion
  - Provide mapping for common invalid values (NA → null, N/A → null, etc.)
  - Show enum options in field mapping interface
  - Allow users to set default values for invalid enum entries

#### E. Date Field Parsing Issues  
- **Problem**: `"invalid input syntax for type date: \"0NaN-NaN-NaNTNaN:NaN:NaN.NaN+NaN:NaN\""`
- **Solution**:
  - Implement robust date parsing with multiple format support
  - Handle empty/null date fields gracefully
  - Add date format detection and conversion
  - Provide date format selection in mapping interface
  - Show preview of parsed dates before import

**Critical Import Flow Fix:**
```javascript
const processImportRow = async (rowData, rowIndex) => {
  try {
    // 1. Generate or handle asset_id
    const processedData = { ...rowData };
    
    // Don't include asset_id in data if it's auto-generated
    if (isAutoGeneratedField('asset_id')) {
      delete processedData.asset_id;
    } else {
      processedData.asset_id = generateAssetId();
    }
    
    // 2. Validate and transform data
    processedData.employment_type = validateEmploymentType(processedData.employment_type);
    processedData.hire_date = validateDate(processedData.hire_date);
    
    // 3. Insert record
    const result = await insertAssetRecord(processedData);
    return { success: true, assetId: result.asset_id };
    
  } catch (error) {
    return { 
      success: false, 
      error: error.message,
      row: rowIndex + 1
    };
  }
};
```

### 5. Enhanced Error Handling
- **Comprehensive error logging** with specific error codes
- **User-friendly error messages** instead of technical stack traces
- **Data validation warnings** before import execution
- **Partial import success** - continue importing valid records, log failures
- **Rollback capability** if import fails partway through
- **Progress tracking** for large imports
- **Detailed import results** showing success/failure counts with specific error reasons

### 5. Export Functionality Enhancement
- **Multiple export formats**: CSV, Excel, JSON
- **Custom field selection**: Let users choose which fields to export
- **Filter options**: Export based on asset criteria
- **Batch export**: Handle large datasets efficiently

## Implementation Requirements

### Frontend Components Needed:
1. **FileUploadComponent**: Drag-drop file upload with format validation
2. **FilePreviewComponent**: Display file contents and detected format
3. **FieldMappingComponent**: Interactive mapping interface
4. **ImportProgressComponent**: Real-time import progress and results
5. **MappingTemplateComponent**: Save/load mapping configurations

### Backend API Endpoints:
1. `POST /api/import/preview` - Analyze uploaded file
2. `POST /api/import/validate-mapping` - Validate field mappings
3. `POST /api/import/execute` - Execute the import with confirmed mappings
4. `GET /api/import/templates` - Get saved mapping templates
5. `POST /api/import/templates` - Save mapping template

### Key Code Areas to Review:
- Asset import service/controller
- File parsing utilities
- API request handling in frontend
- Error handling middleware
- Database transaction management

## Success Criteria
- ✅ No more fetch API errors
- ✅ **CRITICAL**: Asset ID generation working properly - no more null constraint violations
- ✅ Proper file format support and validation
- ✅ Interactive field mapping with preview
- ✅ User can confirm mappings before import
- ✅ Clear distinction between auto-generated and user-provided fields
- ✅ Successful record insertion with proper primary key handling
- ✅ Clear error messages and progress feedback
- ✅ Ability to save and reuse mapping templates
- ✅ Robust error handling and rollback capability

## Testing Requirements
1. Test with various file formats (CSV, Excel, JSON)
2. Test with malformed files
3. Test with large datasets (1000+ records)
4. Test mapping validation with missing required fields
5. Test import rollback on errors
6. Test saved mapping template functionality
7. **Test specific data validation scenarios:**
   - Files with "NA", "N/A", empty employment_type values
   - Files with various date formats (MM/DD/YYYY, DD/MM/YYYY, YYYY-MM-DD)
   - Files with empty or malformed date fields
   - Files with mixed valid/invalid enum values
   - Files with special characters in text fields
8. **Test primary key generation:**
   - Verify asset_id is generated automatically or properly assigned
   - Test that no records fail due to null primary key constraints
   - Verify imported records have valid, unique asset_id values
   - Test rollback when primary key generation fails

Please prioritize fixing the immediate fetch API error first, then implement the field mapping system to prevent future import issues and improve user experience.