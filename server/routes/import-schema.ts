import { Router } from 'express';

const router = Router();

// Database field definitions for different entity types
const getEntitySchema = (entityType: string) => {
  const schemas = {
    employees: {
      fields: [
        {
          name: 'empId',
          displayName: 'Employee ID',
          description: 'Unique employee identifier',
          dataType: 'text',
          required: false,
          autoGenerated: true,
          example: 'EMP00001'
        },
        {
          name: 'englishName',
          displayName: 'English Name',
          description: 'Full name in English',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'John Smith'
        },
        {
          name: 'arabicName',
          displayName: 'Arabic Name',
          description: 'Full name in Arabic (optional)',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'جون سميث'
        },
        {
          name: 'department',
          displayName: 'Department',
          description: 'Employee department',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'IT'
        },
        {
          name: 'title',
          displayName: 'Job Title',
          description: 'Employee position/title',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'Software Engineer'
        },
        {
          name: 'employmentType',
          displayName: 'Employment Type',
          description: 'Type of employment contract',
          dataType: 'enum',
          required: true,
          autoGenerated: false,
          enumValues: ['Full-time', 'Part-time', 'Contract', 'Intern','Freelance'],
          example: 'Full-time'
        },
        {
          name: 'joiningDate',
          displayName: 'Joining Date',
          description: 'Date employee started',
          dataType: 'date',
          required: true,
          autoGenerated: false,
          example: '2024-01-15'
        },
         {
          name: 'exitDate',
          displayName: 'Exit Date',
          description: 'Date when employee left the company',
          dataType: 'date',
          required: false,
          autoGenerated: false,
          example: '2024-12-31'
        },
        {
          name: 'status',
          displayName: 'Status',
          description: 'Employee status',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Active', 'Inactive', 'Terminated'],
          example: 'Active'
        },
        {
          name: 'personalMobile',
          displayName: 'Personal Mobile',
          description: 'Personal phone number',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: '+1234567890'
        },
        {
          name: 'workMobile',
          displayName: 'Work Mobile',
          description: 'Work phone number',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: '+1234567890'
        },
        {
          name: 'personalEmail',
          displayName: 'Personal Email',
          description: 'Personal email address',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'john@personal.com'
        },
        {
          name: 'corporateEmail',
          displayName: 'Corporate Email',
          description: 'Corporate email address',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'john.smith@corp.com'
        },
        {
          name: 'idNumber',
          displayName: 'ID Number',
          description: 'National ID or employee number',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'ID123456789'
        },
        {
          name: 'directManager',
          displayName: 'Direct Manager',
          description: 'Manager employee ID',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '456'
        }
      ]
    },
    
    assets: {
      fields: [
        {
          name: 'assetId',
          displayName: 'Asset ID',
          description: 'Unique asset identifier',
          dataType: 'text',
          required: false,
          autoGenerated: true,
          example: 'AST00001'
        },
        {
          name: 'type',
          displayName: 'Asset Type',
          description: 'Category of the asset',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'Laptop'
        },
        {
          name: 'brand',
          displayName: 'Brand',
          description: 'Manufacturer brand',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'Dell'
        },
        {
          name: 'modelNumber',
          displayName: 'Model Number',
          description: 'Manufacturer model number',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'XPS-13'
        },
        {
          name: 'modelName',
          displayName: 'Model Name',
          description: 'Manufacturer model name',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'XPS 13 Plus'
        },
        {
          name: 'serialNumber',
          displayName: 'Serial Number',
          description: 'Unique serial number',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'SN123456789'
        },
        {
          name: 'status',
          displayName: 'Status',
          description: 'Current asset status',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Available', 'In Use', 'Maintenance', 'Retired', 'Lost'],
          example: 'Available'
        },
        {
          name: 'purchaseDate',
          displayName: 'Purchase Date',
          description: 'Date when asset was purchased',
          dataType: 'date',
          required: false,
          autoGenerated: false,
          example: '2024-01-15'
        },
        {
          name: 'buyPrice',
          displayName: 'Purchase Price',
          description: 'Original purchase price',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '1200.00'
        },
        {
          name: 'warrantyExpiryDate',
          displayName: 'Warranty Expiry',
          description: 'Warranty expiration date',
          dataType: 'date',
          required: false,
          autoGenerated: false,
          example: '2025-01-15'
        },
        {
          name: 'specs',
          displayName: 'Specifications',
          description: 'Technical specifications',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'Intel i7, 16GB RAM, 512GB SSD'
        },
        {
          name: 'cpu',
          displayName: 'CPU',
          description: 'Processor specification',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'Intel Core i7-1250U'
        },
        {
          name: 'ram',
          displayName: 'RAM',
          description: 'Memory specification',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: '16GB DDR4'
        },
        {
          name: 'storage',
          displayName: 'Storage',
          description: 'Storage specification',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: '512GB NVMe SSD'
        },

        {
          name: 'lifeSpan',
          displayName: 'Life Span',
          description: 'Expected lifespan in months',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '36'
        },
        {
          name: 'outOfBoxOs',
          displayName: 'Out of Box OS',
          description: 'Operating system installed by manufacturer',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'Windows 11 Pro'
        },
        {
          name: 'assignedEmployeeId',
          displayName: 'Assigned Employee ID',
          description: 'ID of employee assigned to this asset',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '123'
        }

      ]
    },
    
    tickets: {
      fields: [
        {
          name: 'ticketId',
          displayName: 'Ticket ID',
          description: 'Unique ticket identifier',
          dataType: 'text',
          required: false,
          autoGenerated: true,
          example: 'TKT00001'
        },
        {
          name: 'summary',
          displayName: 'Summary',
          description: 'Brief description of the issue',
          dataType: 'text',
          required: true,
          autoGenerated: false,
          example: 'Laptop not starting'
        },
        {
          name: 'description',
          displayName: 'Description',
          description: 'Detailed description of the issue',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'The laptop shows a black screen when powered on'
        },
        {
          name: 'category',
          displayName: 'Category',
          description: 'Issue category',
          dataType: 'text',
          required: false,
          autoGenerated: false,
          example: 'Hardware'
        },
        {
          name: 'requestType',
          displayName: 'Request Type',
          description: 'Type of service request',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Incident', 'Service Request', 'Change Request', 'Problem'],
          example: 'Incident'
        },
        {
          name: 'priority',
          displayName: 'Priority',
          description: 'Issue priority level',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Low', 'Medium', 'High', 'Critical'],
          example: 'Medium'
        },
        {
          name: 'urgency',
          displayName: 'Urgency',
          description: 'Issue urgency level',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Low', 'Medium', 'High', 'Critical'],
          example: 'Medium'
        },
        {
          name: 'impact',
          displayName: 'Impact',
          description: 'Business impact level',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Low', 'Medium', 'High', 'Critical'],
          example: 'Medium'
        },
        {
          name: 'status',
          displayName: 'Status',
          description: 'Current ticket status',
          dataType: 'enum',
          required: false,
          autoGenerated: false,
          enumValues: ['Open', 'In Progress', 'Pending', 'Resolved', 'Closed'],
          example: 'Open'
        },
        {
          name: 'submittedById',
          displayName: 'Submitted By ID',
          description: 'User ID who submitted the ticket',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '123'
        },
        {
          name: 'assignedToId',
          displayName: 'Assigned To ID',
          description: 'User ID assigned to handle the ticket',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '456'
        },
        {
          name: 'relatedAssetId',
          displayName: 'Related Asset ID',
          description: 'Asset ID related to this ticket',
          dataType: 'number',
          required: false,
          autoGenerated: false,
          example: '789'
        },
        {
          name: 'dueDate',
          displayName: 'Due Date',
          description: 'Expected resolution date',
          dataType: 'date',
          required: false,
          autoGenerated: false,
          example: '2024-02-15'
        }
      ]
    }
  };
  
  return schemas[entityType as keyof typeof schemas] || null;
};

// Get database schema for entity type (simplified without middleware for now)
router.get('/schema/:entityType', (req, res) => {
  try {
    const { entityType } = req.params;
    const schema = getEntitySchema(entityType);
    
    if (!schema) {
      return res.status(400).json({ error: 'Invalid entity type' });
    }
    
    res.json(schema);
  } catch (error) {
    console.error('Schema fetch error:', error);
    res.status(500).json({ error: 'Failed to fetch schema' });
  }
});

export default router;